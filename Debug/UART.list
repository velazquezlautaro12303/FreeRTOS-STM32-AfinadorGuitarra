
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004b10  08004b10  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b10  08004b10  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032a0  20000060  08004b78  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003300  08004b78  00023300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150fa  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033bb  00000000  00000000  000351c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea0  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ea6  00000000  00000000  0003a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ba0  00000000  00000000  0005459e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000977c4  00000000  00000000  0006913e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050ec  00000000  00000000  00100904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001059f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a9c 	.word	0x08004a9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004a9c 	.word	0x08004a9c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb4d 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f831 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f90b 	bl	80003a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f8eb 	bl	800036c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8bf 	bl	8000318 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800019a:	f000 f87f 	bl	800029c <MX_ADC1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreStaticDef(myBinarySem01, &myBinarySem01ControlBlock);
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
 80001a2:	4b0f      	ldr	r3, [pc, #60]	; (80001e0 <main+0x60>)
 80001a4:	627b      	str	r3, [r7, #36]	; 0x24
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 0);
 80001a6:	f107 0320 	add.w	r3, r7, #32
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f002 fd1b 	bl	8002be8 <osSemaphoreCreate>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <main+0x64>)
 80001b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0x68>)
 80001ba:	1d3c      	adds	r4, r7, #4
 80001bc:	461d      	mov	r5, r3
 80001be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fcbe 	bl	8002b50 <osThreadCreate>
 80001d4:	4603      	mov	r3, r0
 80001d6:	4a05      	ldr	r2, [pc, #20]	; (80001ec <main+0x6c>)
 80001d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001da:	f002 fcb2 	bl	8002b42 <osKernelStart>

  /* Starts the ADC in DMA mode*/

//  uint16_t temp;

  while (1)
 80001de:	e7fe      	b.n	80001de <main+0x5e>
 80001e0:	200003e0 	.word	0x200003e0
 80001e4:	200003dc 	.word	0x200003dc
 80001e8:	08004ac0 	.word	0x08004ac0
 80001ec:	200003d8 	.word	0x200003d8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	; 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f004 fb66 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000230:	2300      	movs	r3, #0
 8000232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000234:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000238:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fb58 	bl	80018f4 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800024a:	f000 f92f 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800025a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2101      	movs	r1, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fdc4 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000276:	f000 f919 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027a:	2302      	movs	r3, #2
 800027c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f001 ff75 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000290:	f000 f90c 	bl	80004ac <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3750      	adds	r7, #80	; 0x50
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <MX_ADC1_Init+0x74>)
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <MX_ADC1_Init+0x78>)
 80002b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <MX_ADC1_Init+0x74>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_ADC1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_ADC1_Init+0x74>)
 80002c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_ADC1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_ADC1_Init+0x74>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <MX_ADC1_Init+0x74>)
 80002da:	f000 fad5 	bl	8000888 <HAL_ADC_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e4:	f000 f8e2 	bl	80004ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002f0:	2307      	movs	r3, #7
 80002f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4619      	mov	r1, r3
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_ADC1_Init+0x74>)
 80002fa:	f000 fc97 	bl	8000c2c <HAL_ADC_ConfigChannel>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000304:	f000 f8d2 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000031c 	.word	0x2000031c
 8000314:	40012400 	.word	0x40012400

08000318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_USART1_UART_Init+0x50>)
 8000320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000350:	f002 fa10 	bl	8002774 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035a:	f000 f8a7 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000390 	.word	0x20000390
 8000368:	40013800 	.word	0x40013800

0800036c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_DMA_Init+0x38>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <MX_DMA_Init+0x38>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_DMA_Init+0x38>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2105      	movs	r1, #5
 800038e:	200b      	movs	r0, #11
 8000390:	f000 fefb 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000394:	200b      	movs	r0, #11
 8000396:	f000 ff14 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_GPIO_Init+0x78>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a17      	ldr	r2, [pc, #92]	; (8000420 <MX_GPIO_Init+0x78>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_GPIO_Init+0x78>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a11      	ldr	r2, [pc, #68]	; (8000420 <MX_GPIO_Init+0x78>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f2:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_GPIO_Init+0x7c>)
 80003f4:	f001 fa66 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80003f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <MX_GPIO_Init+0x7c>)
 8000412:	f001 f8d3 	bl	80015bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000

08000428 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t position = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
  const uint8_t value_reset = LEN_BUFFER / LEN_DATA_UART;
 8000434:	2308      	movs	r3, #8
 8000436:	73bb      	strb	r3, [r7, #14]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, LEN_BUFFER);
 8000438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800043c:	490f      	ldr	r1, [pc, #60]	; (800047c <StartDefaultTask+0x54>)
 800043e:	4810      	ldr	r0, [pc, #64]	; (8000480 <StartDefaultTask+0x58>)
 8000440:	f000 fafa 	bl	8000a38 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
//	  osSemaphoreWait(myBinarySem01Handle, 0);
	  HAL_UART_Transmit(&huart1, (uint8_t *)rawValues + position * LEN_DATA_UART, LEN_DATA_UART, HAL_MAX_DELAY);
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	025b      	lsls	r3, r3, #9
 8000448:	461a      	mov	r2, r3
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <StartDefaultTask+0x54>)
 800044c:	18d1      	adds	r1, r2, r3
 800044e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <StartDefaultTask+0x5c>)
 8000458:	f002 f9dc 	bl	8002814 <HAL_UART_Transmit>
	  position++;
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	3301      	adds	r3, #1
 8000460:	73fb      	strb	r3, [r7, #15]
	  position %= value_reset;
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	7bba      	ldrb	r2, [r7, #14]
 8000466:	fbb3 f1f2 	udiv	r1, r3, r2
 800046a:	fb01 f202 	mul.w	r2, r1, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	73fb      	strb	r3, [r7, #15]
	  vTaskDelay(pdMS_TO_TICKS(.5));
 8000472:	2000      	movs	r0, #0
 8000474:	f003 f94a 	bl	800370c <vTaskDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)rawValues + position * LEN_DATA_UART, LEN_DATA_UART, HAL_MAX_DELAY);
 8000478:	e7e4      	b.n	8000444 <StartDefaultTask+0x1c>
 800047a:	bf00      	nop
 800047c:	20000428 	.word	0x20000428
 8000480:	2000031c 	.word	0x2000031c
 8000484:	20000390 	.word	0x20000390

08000488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d101      	bne.n	800049e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800049a:	f000 f9d9 	bl	8000850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40012c00 	.word	0x40012c00

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <Error_Handler+0x8>
	...

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_MspInit+0x68>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a17      	ldr	r2, [pc, #92]	; (8000520 <HAL_MspInit+0x68>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_MspInit+0x68>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_MspInit+0x68>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a11      	ldr	r2, [pc, #68]	; (8000520 <HAL_MspInit+0x68>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_MspInit+0x68>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	210f      	movs	r1, #15
 80004f2:	f06f 0001 	mvn.w	r0, #1
 80004f6:	f000 fe48 	bl	800118a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_MspInit+0x6c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_MspInit+0x6c>)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40010000 	.word	0x40010000

08000528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <HAL_ADC_MspInit+0xc0>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d14a      	bne.n	80005de <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 800054e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <HAL_ADC_MspInit+0xc4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <HAL_ADC_MspInit+0xc8>)
 8000588:	f001 f818 	bl	80015bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <HAL_ADC_MspInit+0xd0>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005b6:	2220      	movs	r2, #32
 80005b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005c4:	f000 fe0c 	bl	80011e0 <HAL_DMA_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80005ce:	f7ff ff6d 	bl	80004ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005d6:	621a      	str	r2, [r3, #32]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_ADC_MspInit+0xcc>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012400 	.word	0x40012400
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	2000034c 	.word	0x2000034c
 80005f8:	40020008 	.word	0x40020008

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <HAL_UART_MspInit+0x8c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d131      	bne.n	8000680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_UART_MspInit+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_UART_MspInit+0x90>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_UART_MspInit+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_UART_MspInit+0x90>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_UART_MspInit+0x90>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HAL_UART_MspInit+0x94>)
 8000662:	f000 ffab 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <HAL_UART_MspInit+0x94>)
 800067c:	f000 ff9e 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013800 	.word	0x40013800
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <HAL_InitTick+0xd0>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <HAL_InitTick+0xd0>)
 80006b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <HAL_InitTick+0xd0>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fd03 	bl	80020d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006d2:	f001 fced 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 80006d6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <HAL_InitTick+0xd4>)
 80006dc:	fba2 2303 	umull	r2, r3, r2, r3
 80006e0:	0c9b      	lsrs	r3, r3, #18
 80006e2:	3b01      	subs	r3, #1
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <HAL_InitTick+0xd8>)
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <HAL_InitTick+0xdc>)
 80006ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <HAL_InitTick+0xd8>)
 80006ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <HAL_InitTick+0xd8>)
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_InitTick+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <HAL_InitTick+0xd8>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_InitTick+0xd8>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <HAL_InitTick+0xd8>)
 800070e:	f001 fde7 	bl	80022e0 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11b      	bne.n	8000758 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <HAL_InitTick+0xd8>)
 8000722:	f001 fe35 	bl	8002390 <HAL_TIM_Base_Start_IT>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800072c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000730:	2b00      	cmp	r3, #0
 8000732:	d111      	bne.n	8000758 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000734:	2019      	movs	r0, #25
 8000736:	f000 fd44 	bl	80011c2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d808      	bhi.n	8000752 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	2019      	movs	r0, #25
 8000746:	f000 fd20 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <HAL_InitTick+0xe0>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	e002      	b.n	8000758 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800075c:	4618      	mov	r0, r3
 800075e:	3730      	adds	r7, #48	; 0x30
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	431bde83 	.word	0x431bde83
 800076c:	20002428 	.word	0x20002428
 8000770:	40012c00 	.word	0x40012c00
 8000774:	20000004 	.word	0x20000004

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <DMA1_Channel1_IRQHandler+0x10>)
 80007aa:	f000 fdd3 	bl	8001354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000034c 	.word	0x2000034c

080007b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TIM1_UP_IRQHandler+0x10>)
 80007be:	f001 fe39 	bl	8002434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20002428 	.word	0x20002428

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff fff8 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007de:	490c      	ldr	r1, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007f4:	4c09      	ldr	r4, [pc, #36]	; (800081c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f004 f8c3 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fcbb 	bl	8000180 <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000814:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 8000818:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800081c:	20003300 	.word	0x20003300

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 fc9d 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f7ff ff2a 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fe3a 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x1c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x20>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a03      	ldr	r2, [pc, #12]	; (8000870 <HAL_IncTick+0x20>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000008 	.word	0x20000008
 8000870:	20002470 	.word	0x20002470

08000874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <HAL_GetTick+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20002470 	.word	0x20002470

08000888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e0be      	b.n	8000a28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fe2e 	bl	8000528 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 faff 	bl	8000ed0 <ADC_ConversionStop_Disable>
 80008d2:	4603      	mov	r3, r0
 80008d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 8099 	bne.w	8000a16 <HAL_ADC_Init+0x18e>
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8095 	bne.w	8000a16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008f4:	f023 0302 	bic.w	r3, r3, #2
 80008f8:	f043 0202 	orr.w	r2, r3, #2
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000908:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7b1b      	ldrb	r3, [r3, #12]
 800090e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000910:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	4313      	orrs	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000920:	d003      	beq.n	800092a <HAL_ADC_Init+0xa2>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d102      	bne.n	8000930 <HAL_ADC_Init+0xa8>
 800092a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092e:	e000      	b.n	8000932 <HAL_ADC_Init+0xaa>
 8000930:	2300      	movs	r3, #0
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7d1b      	ldrb	r3, [r3, #20]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d119      	bne.n	8000974 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7b1b      	ldrb	r3, [r3, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d109      	bne.n	800095c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	3b01      	subs	r3, #1
 800094e:	035a      	lsls	r2, r3, #13
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	e00b      	b.n	8000974 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	f043 0220 	orr.w	r2, r3, #32
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	f043 0201 	orr.w	r2, r3, #1
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	430a      	orrs	r2, r1
 8000986:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <HAL_ADC_Init+0x1a8>)
 8000990:	4013      	ands	r3, r2
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	430b      	orrs	r3, r1
 800099a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a4:	d003      	beq.n	80009ae <HAL_ADC_Init+0x126>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	051b      	lsls	r3, r3, #20
 80009b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_ADC_Init+0x1ac>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d10b      	bne.n	80009f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f023 0303 	bic.w	r3, r3, #3
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f2:	e018      	b.n	8000a26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f8:	f023 0312 	bic.w	r3, r3, #18
 80009fc:	f043 0210 	orr.w	r2, r3, #16
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	f043 0201 	orr.w	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a14:	e007      	b.n	8000a26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f043 0210 	orr.w	r2, r3, #16
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	ffe1f7fd 	.word	0xffe1f7fd
 8000a34:	ff1f0efe 	.word	0xff1f0efe

08000a38 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a64      	ldr	r2, [pc, #400]	; (8000be0 <HAL_ADC_Start_DMA+0x1a8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d004      	beq.n	8000a5c <HAL_ADC_Start_DMA+0x24>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a63      	ldr	r2, [pc, #396]	; (8000be4 <HAL_ADC_Start_DMA+0x1ac>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <HAL_ADC_Start_DMA+0x32>
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <HAL_ADC_Start_DMA+0x1a8>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f040 80b3 	bne.w	8000bd0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d101      	bne.n	8000a78 <HAL_ADC_Start_DMA+0x40>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e0ae      	b.n	8000bd6 <HAL_ADC_Start_DMA+0x19e>
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f9cb 	bl	8000e1c <ADC_Enable>
 8000a86:	4603      	mov	r3, r0
 8000a88:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f040 809a 	bne.w	8000bc6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_ADC_Start_DMA+0x1ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d105      	bne.n	8000abc <HAL_ADC_Start_DMA+0x84>
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <HAL_ADC_Start_DMA+0x1a8>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d115      	bne.n	8000ae8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d026      	beq.n	8000b24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ade:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ae6:	e01d      	b.n	8000b24 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a39      	ldr	r2, [pc, #228]	; (8000be0 <HAL_ADC_Start_DMA+0x1a8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d004      	beq.n	8000b08 <HAL_ADC_Start_DMA+0xd0>
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a38      	ldr	r2, [pc, #224]	; (8000be4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d10d      	bne.n	8000b24 <HAL_ADC_Start_DMA+0xec>
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d007      	beq.n	8000b24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f023 0206 	bic.w	r2, r3, #6
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3c:	e002      	b.n	8000b44 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <HAL_ADC_Start_DMA+0x1b0>)
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	4a24      	ldr	r2, [pc, #144]	; (8000bec <HAL_ADC_Start_DMA+0x1b4>)
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_ADC_Start_DMA+0x1b8>)
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f06f 0202 	mvn.w	r2, #2
 8000b6c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b7c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6a18      	ldr	r0, [r3, #32]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	334c      	adds	r3, #76	; 0x4c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f000 fb81 	bl	8001294 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ba0:	d108      	bne.n	8000bb4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000bb0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bb2:	e00f      	b.n	8000bd4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000bc2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bc4:	e006      	b.n	8000bd4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000bce:	e001      	b.n	8000bd4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40012400 	.word	0x40012400
 8000be4:	40012800 	.word	0x40012800
 8000be8:	08000f53 	.word	0x08000f53
 8000bec:	08000fcf 	.word	0x08000fcf
 8000bf0:	08000feb 	.word	0x08000feb

08000bf4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_ADC_ConfigChannel+0x20>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e0dc      	b.n	8000e06 <HAL_ADC_ConfigChannel+0x1da>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b06      	cmp	r3, #6
 8000c5a:	d81c      	bhi.n	8000c96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3b05      	subs	r3, #5
 8000c6e:	221f      	movs	r2, #31
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4019      	ands	r1, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3b05      	subs	r3, #5
 8000c88:	fa00 f203 	lsl.w	r2, r0, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
 8000c94:	e03c      	b.n	8000d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d81c      	bhi.n	8000cd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b23      	subs	r3, #35	; 0x23
 8000cb0:	221f      	movs	r2, #31
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4019      	ands	r1, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3b23      	subs	r3, #35	; 0x23
 8000cca:	fa00 f203 	lsl.w	r2, r0, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd6:	e01b      	b.n	8000d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3b41      	subs	r3, #65	; 0x41
 8000cea:	221f      	movs	r2, #31
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	3b41      	subs	r3, #65	; 0x41
 8000d04:	fa00 f203 	lsl.w	r2, r0, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	d91c      	bls.n	8000d52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68d9      	ldr	r1, [r3, #12]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	3b1e      	subs	r3, #30
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4019      	ands	r1, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	6898      	ldr	r0, [r3, #8]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	3b1e      	subs	r3, #30
 8000d44:	fa00 f203 	lsl.w	r2, r0, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	e019      	b.n	8000d86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6919      	ldr	r1, [r3, #16]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	2207      	movs	r2, #7
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4019      	ands	r1, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	6898      	ldr	r0, [r3, #8]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b10      	cmp	r3, #16
 8000d8c:	d003      	beq.n	8000d96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d92:	2b11      	cmp	r3, #17
 8000d94:	d132      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d125      	bne.n	8000dec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d126      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d11a      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_ADC_ConfigChannel+0x1e8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	0c9a      	lsrs	r2, r3, #18
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ddc:	e002      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f9      	bne.n	8000dde <HAL_ADC_ConfigChannel+0x1b2>
 8000dea:	e007      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f043 0220 	orr.w	r2, r3, #32
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40012400 	.word	0x40012400
 8000e14:	20000000 	.word	0x20000000
 8000e18:	431bde83 	.word	0x431bde83

08000e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d040      	beq.n	8000ebc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0201 	orr.w	r2, r2, #1
 8000e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <ADC_Enable+0xac>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <ADC_Enable+0xb0>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e58:	e002      	b.n	8000e60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e66:	f7ff fd05 	bl	8000874 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e6c:	e01f      	b.n	8000eae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e6e:	f7ff fd01 	bl	8000874 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d918      	bls.n	8000eae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d011      	beq.n	8000eae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e007      	b.n	8000ebe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d1d8      	bne.n	8000e6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	431bde83 	.word	0x431bde83

08000ed0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d12e      	bne.n	8000f48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000efa:	f7ff fcbb 	bl	8000874 <HAL_GetTick>
 8000efe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f00:	e01b      	b.n	8000f3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f02:	f7ff fcb7 	bl	8000874 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d914      	bls.n	8000f3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10d      	bne.n	8000f3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f043 0210 	orr.w	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e007      	b.n	8000f4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d0dc      	beq.n	8000f02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d127      	bne.n	8000fbc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f86:	d115      	bne.n	8000fb4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fe1d 	bl	8000bf4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000fba:	e004      	b.n	8000fc6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	4798      	blx	r3
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fe12 	bl	8000c06 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	f043 0204 	orr.w	r2, r3, #4
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff fe01 	bl	8000c18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4906      	ldr	r1, [pc, #24]	; (80010b8 <__NVIC_EnableIRQ+0x34>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff4f 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff64 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ffb2 	bl	8001110 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff81 	bl	80010bc <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff57 	bl	8001084 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e043      	b.n	800127e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <HAL_DMA_Init+0xa8>)
 80011fe:	4413      	add	r3, r2
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <HAL_DMA_Init+0xac>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_DMA_Init+0xb0>)
 8001212:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800122a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800122e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	bffdfff8 	.word	0xbffdfff8
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_DMA_Start_IT+0x20>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e04b      	b.n	800134c <HAL_DMA_Start_IT+0xb8>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d13a      	bne.n	800133e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 f937 	bl	8001560 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 020e 	orr.w	r2, r2, #14
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e00f      	b.n	800132c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0204 	bic.w	r2, r2, #4
 800131a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 020a 	orr.w	r2, r2, #10
 800132a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e005      	b.n	800134a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	2204      	movs	r2, #4
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d04f      	beq.n	800141c <HAL_DMA_IRQHandler+0xc8>
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d04a      	beq.n	800141c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a66      	ldr	r2, [pc, #408]	; (8001544 <HAL_DMA_IRQHandler+0x1f0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d029      	beq.n	8001402 <HAL_DMA_IRQHandler+0xae>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a65      	ldr	r2, [pc, #404]	; (8001548 <HAL_DMA_IRQHandler+0x1f4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d022      	beq.n	80013fe <HAL_DMA_IRQHandler+0xaa>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_DMA_IRQHandler+0x1f8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01a      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xa4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a62      	ldr	r2, [pc, #392]	; (8001550 <HAL_DMA_IRQHandler+0x1fc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d012      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x9e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a60      	ldr	r2, [pc, #384]	; (8001554 <HAL_DMA_IRQHandler+0x200>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00a      	beq.n	80013ec <HAL_DMA_IRQHandler+0x98>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5f      	ldr	r2, [pc, #380]	; (8001558 <HAL_DMA_IRQHandler+0x204>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d102      	bne.n	80013e6 <HAL_DMA_IRQHandler+0x92>
 80013e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e4:	e00e      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 80013e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013ea:	e00b      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 80013ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013f0:	e008      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 80013f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f6:	e005      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	e002      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	e000      	b.n	8001404 <HAL_DMA_IRQHandler+0xb0>
 8001402:	2304      	movs	r3, #4
 8001404:	4a55      	ldr	r2, [pc, #340]	; (800155c <HAL_DMA_IRQHandler+0x208>)
 8001406:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8094 	beq.w	800153a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800141a:	e08e      	b.n	800153a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2202      	movs	r2, #2
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d056      	beq.n	80014da <HAL_DMA_IRQHandler+0x186>
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d051      	beq.n	80014da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 020a 	bic.w	r2, r2, #10
 8001452:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a38      	ldr	r2, [pc, #224]	; (8001544 <HAL_DMA_IRQHandler+0x1f0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d029      	beq.n	80014ba <HAL_DMA_IRQHandler+0x166>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a37      	ldr	r2, [pc, #220]	; (8001548 <HAL_DMA_IRQHandler+0x1f4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d022      	beq.n	80014b6 <HAL_DMA_IRQHandler+0x162>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a35      	ldr	r2, [pc, #212]	; (800154c <HAL_DMA_IRQHandler+0x1f8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01a      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x15c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a34      	ldr	r2, [pc, #208]	; (8001550 <HAL_DMA_IRQHandler+0x1fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d012      	beq.n	80014aa <HAL_DMA_IRQHandler+0x156>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_DMA_IRQHandler+0x200>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x150>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <HAL_DMA_IRQHandler+0x204>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d102      	bne.n	800149e <HAL_DMA_IRQHandler+0x14a>
 8001498:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800149c:	e00e      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 800149e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a2:	e00b      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 80014a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a8:	e008      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	e005      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	e002      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 80014b6:	2320      	movs	r3, #32
 80014b8:	e000      	b.n	80014bc <HAL_DMA_IRQHandler+0x168>
 80014ba:	2302      	movs	r3, #2
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_DMA_IRQHandler+0x208>)
 80014be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d034      	beq.n	800153a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014d8:	e02f      	b.n	800153a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d028      	beq.n	800153c <HAL_DMA_IRQHandler+0x1e8>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
    }
  }
  return;
 800153a:	bf00      	nop
 800153c:	bf00      	nop
}
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020008 	.word	0x40020008
 8001548:	4002001c 	.word	0x4002001c
 800154c:	40020030 	.word	0x40020030
 8001550:	40020044 	.word	0x40020044
 8001554:	40020058 	.word	0x40020058
 8001558:	4002006c 	.word	0x4002006c
 800155c:	40020000 	.word	0x40020000

08001560 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d108      	bne.n	80015a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800159e:	e007      	b.n	80015b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e169      	b.n	80018a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d0:	2201      	movs	r2, #1
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 8158 	bne.w	800189e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a9a      	ldr	r2, [pc, #616]	; (800185c <HAL_GPIO_Init+0x2a0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d05e      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 80015f8:	4a98      	ldr	r2, [pc, #608]	; (800185c <HAL_GPIO_Init+0x2a0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d875      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 80015fe:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2a4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d058      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001604:	4a96      	ldr	r2, [pc, #600]	; (8001860 <HAL_GPIO_Init+0x2a4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d86f      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800160a:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2a8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d052      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001610:	4a94      	ldr	r2, [pc, #592]	; (8001864 <HAL_GPIO_Init+0x2a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d869      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001616:	4a94      	ldr	r2, [pc, #592]	; (8001868 <HAL_GPIO_Init+0x2ac>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d04c      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 800161c:	4a92      	ldr	r2, [pc, #584]	; (8001868 <HAL_GPIO_Init+0x2ac>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d863      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001622:	4a92      	ldr	r2, [pc, #584]	; (800186c <HAL_GPIO_Init+0x2b0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d046      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001628:	4a90      	ldr	r2, [pc, #576]	; (800186c <HAL_GPIO_Init+0x2b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d85d      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d82a      	bhi.n	8001688 <HAL_GPIO_Init+0xcc>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d859      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <HAL_GPIO_Init+0x80>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	080016b7 	.word	0x080016b7
 8001640:	08001691 	.word	0x08001691
 8001644:	080016a3 	.word	0x080016a3
 8001648:	080016e5 	.word	0x080016e5
 800164c:	080016eb 	.word	0x080016eb
 8001650:	080016eb 	.word	0x080016eb
 8001654:	080016eb 	.word	0x080016eb
 8001658:	080016eb 	.word	0x080016eb
 800165c:	080016eb 	.word	0x080016eb
 8001660:	080016eb 	.word	0x080016eb
 8001664:	080016eb 	.word	0x080016eb
 8001668:	080016eb 	.word	0x080016eb
 800166c:	080016eb 	.word	0x080016eb
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016eb 	.word	0x080016eb
 8001678:	080016eb 	.word	0x080016eb
 800167c:	080016eb 	.word	0x080016eb
 8001680:	08001699 	.word	0x08001699
 8001684:	080016ad 	.word	0x080016ad
 8001688:	4a79      	ldr	r2, [pc, #484]	; (8001870 <HAL_GPIO_Init+0x2b4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168e:	e02c      	b.n	80016ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e029      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e024      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3308      	adds	r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e01f      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e01a      	b.n	80016ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e013      	b.n	80016ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	611a      	str	r2, [r3, #16]
          break;
 80016d6:	e009      	b.n	80016ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	615a      	str	r2, [r3, #20]
          break;
 80016e2:	e003      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x130>
          break;
 80016ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d801      	bhi.n	80016f6 <HAL_GPIO_Init+0x13a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_Init+0x13e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d802      	bhi.n	8001708 <HAL_GPIO_Init+0x14c>
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x152>
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	3b08      	subs	r3, #8
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	210f      	movs	r1, #15
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	6a39      	ldr	r1, [r7, #32]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80b1 	beq.w	800189e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800173c:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a40      	ldr	r2, [pc, #256]	; (800187c <HAL_GPIO_Init+0x2c0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x1ec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <HAL_GPIO_Init+0x2c4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x1e8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <HAL_GPIO_Init+0x2c8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x1e4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3d      	ldr	r2, [pc, #244]	; (8001888 <HAL_GPIO_Init+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x1e0>
 8001798:	2303      	movs	r3, #3
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 800179c:	2304      	movs	r3, #4
 800179e:	e004      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ba:	492f      	ldr	r1, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x2bc>)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	492c      	ldr	r1, [pc, #176]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4928      	ldr	r1, [pc, #160]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_GPIO_Init+0x2d0>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4922      	ldr	r1, [pc, #136]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	491e      	ldr	r1, [pc, #120]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4918      	ldr	r1, [pc, #96]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4914      	ldr	r1, [pc, #80]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_GPIO_Init+0x2d0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	490e      	ldr	r1, [pc, #56]	; (800188c <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e021      	b.n	800189e <HAL_GPIO_Init+0x2e2>
 800185a:	bf00      	nop
 800185c:	10320000 	.word	0x10320000
 8001860:	10310000 	.word	0x10310000
 8001864:	10220000 	.word	0x10220000
 8001868:	10210000 	.word	0x10210000
 800186c:	10120000 	.word	0x10120000
 8001870:	10110000 	.word	0x10110000
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40011000 	.word	0x40011000
 8001888:	40011400 	.word	0x40011400
 800188c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	43db      	mvns	r3, r3
 8001898:	4909      	ldr	r1, [pc, #36]	; (80018c0 <HAL_GPIO_Init+0x304>)
 800189a:	4013      	ands	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f ae8e 	bne.w	80015d0 <HAL_GPIO_Init+0x14>
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	372c      	adds	r7, #44	; 0x2c
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e272      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8087 	beq.w	8001a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001914:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b04      	cmp	r3, #4
 800191e:	d00c      	beq.n	800193a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001920:	4b8f      	ldr	r3, [pc, #572]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d112      	bne.n	8001952 <HAL_RCC_OscConfig+0x5e>
 800192c:	4b8c      	ldr	r3, [pc, #560]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d10b      	bne.n	8001952 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d06c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x12c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d168      	bne.n	8001a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e24c      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x76>
 800195c:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e02e      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x98>
 8001972:	4b7b      	ldr	r3, [pc, #492]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b78      	ldr	r3, [pc, #480]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a77      	ldr	r2, [pc, #476]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e01d      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0xbc>
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0xd4>
 80019b0:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a67      	ldr	r2, [pc, #412]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7fe ff50 	bl	8000874 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7fe ff4c 	bl	8000874 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e200      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe4>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7fe ff3c 	bl	8000874 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7fe ff38 	bl	8000874 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1ec      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x10c>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d11c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x18c>
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d116      	bne.n	8001a80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x176>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e1c0      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4939      	ldr	r1, [pc, #228]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	e03a      	b.n	8001af6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe fef1 	bl	8000874 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7fe feed 	bl	8000874 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1a1      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4927      	ldr	r1, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x270>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fed0 	bl	8000874 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7fe fecc 	bl	8000874 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e180      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03a      	beq.n	8001b78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d019      	beq.n	8001b3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7fe feb0 	bl	8000874 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7fe feac 	bl	8000874 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e160      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f000 fafe 	bl	8002138 <RCC_Delay>
 8001b3c:	e01c      	b.n	8001b78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7fe fe96 	bl	8000874 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fe92 	bl	8000874 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e146      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	42420000 	.word	0x42420000
 8001b68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e9      	bne.n	8001b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a6 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a87      	ldr	r2, [pc, #540]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d118      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fe53 	bl	8000874 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7fe fe4f 	bl	8000874 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b64      	cmp	r3, #100	; 0x64
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e103      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x4c8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x312>
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e02d      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x334>
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	e01c      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x356>
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a5d      	ldr	r2, [pc, #372]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x36e>
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d015      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe fe03 	bl	8000874 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe fdff 	bl	8000874 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0b1      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ee      	beq.n	8001c72 <HAL_RCC_OscConfig+0x37e>
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fded 	bl	8000874 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fde9 	bl	8000874 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e09b      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ee      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a3b      	ldr	r2, [pc, #236]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8087 	beq.w	8001dea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d061      	beq.n	8001dac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d146      	bne.n	8001d7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fdbd 	bl	8000874 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fdb9 	bl	8000874 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e06d      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d108      	bne.n	8001d38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4921      	ldr	r1, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a19      	ldr	r1, [r3, #32]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	491b      	ldr	r1, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7fe fd8d 	bl	8000874 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fd89 	bl	8000874 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e03d      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46a>
 8001d7c:	e035      	b.n	8001dea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fd76 	bl	8000874 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe fd72 	bl	8000874 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e026      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x498>
 8001daa:	e01e      	b.n	8001dea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d107      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e019      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x500>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0d0      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4965      	ldr	r1, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d040      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d115      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e073      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06b      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fcc4 	bl	8000874 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fcc0 	bl	8000874 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e053      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d210      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 f821 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fb74 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08004ae4 	.word	0x08004ae4
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d002      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x30>
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x36>
 8001ffa:	e027      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffe:	613b      	str	r3, [r7, #16]
      break;
 8002000:	e027      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0c9b      	lsrs	r3, r3, #18
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_RCC_GetSysClockFreq+0x9c>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_GetSysClockFreq+0x94>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0c5b      	lsrs	r3, r3, #17
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_RCC_GetSysClockFreq+0x98>)
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e004      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	613b      	str	r3, [r7, #16]
      break;
 800204a:	e002      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetSysClockFreq+0x98>)
 800204e:	613b      	str	r3, [r7, #16]
      break;
 8002050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002052:	693b      	ldr	r3, [r7, #16]
}
 8002054:	4618      	mov	r0, r3
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	007a1200 	.word	0x007a1200
 8002068:	08004afc 	.word	0x08004afc
 800206c:	08004b0c 	.word	0x08004b0c
 8002070:	003d0900 	.word	0x003d0900

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_RCC_GetHCLKFreq+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800208c:	f7ff fff2 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08004af4 	.word	0x08004af4

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b4:	f7ff ffde 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0adb      	lsrs	r3, r3, #11
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004af4 	.word	0x08004af4

080020d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	220f      	movs	r2, #15
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_RCC_GetClockConfig+0x58>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_GetClockConfig+0x58>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_GetClockConfig+0x58>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_GetClockConfig+0x58>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetClockConfig+0x5c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0207 	and.w	r2, r3, #7
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000
 8002134:	40022000 	.word	0x40022000

08002138 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <RCC_Delay+0x34>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <RCC_Delay+0x38>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a5b      	lsrs	r3, r3, #9
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002154:	bf00      	nop
  }
  while (Delay --);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	60fa      	str	r2, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f9      	bne.n	8002154 <RCC_Delay+0x1c>
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	20000000 	.word	0x20000000
 8002170:	10624dd3 	.word	0x10624dd3

08002174 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d07d      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002194:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	61d3      	str	r3, [r2, #28]
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b8:	2301      	movs	r3, #1
 80021ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d118      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c8:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a42      	ldr	r2, [pc, #264]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d4:	f7fe fb4e 	bl	8000874 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	e008      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021dc:	f7fe fb4a 	bl	8000874 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e06d      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02e      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d027      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002228:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fb19 	bl	8000874 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fb15 	bl	8000874 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e036      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4917      	ldr	r1, [pc, #92]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	4313      	orrs	r3, r2
 8002278:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	490b      	ldr	r1, [pc, #44]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42420440 	.word	0x42420440

080022e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e041      	b.n	8002376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f839 	bl	800237e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 f9b4 	bl	800268c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e03a      	b.n	800241e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_TIM_Base_Start_IT+0x98>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_TIM_Base_Start_IT+0x9c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x58>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_TIM_Base_Start_IT+0xa0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d010      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	e007      	b.n	800241c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800

08002434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0202 	mvn.w	r2, #2
 8002460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8ed 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8e0 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8ef 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0204 	mvn.w	r2, #4
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8c3 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8b6 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8c5 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0208 	mvn.w	r2, #8
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f899 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f88c 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f89b 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0210 	mvn.w	r2, #16
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2208      	movs	r2, #8
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f86f 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f862 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f871 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0201 	mvn.w	r2, #1
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fd ff68 	bl	8000488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8bf 	bl	8002762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f835 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d10e      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	d107      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0220 	mvn.w	r2, #32
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f88a 	bl	8002750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a29      	ldr	r2, [pc, #164]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00b      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <TIM_Base_SetConfig+0xbc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a25      	ldr	r2, [pc, #148]	; (800274c <TIM_Base_SetConfig+0xc0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <TIM_Base_SetConfig+0xbc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <TIM_Base_SetConfig+0xc0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d103      	bne.n	8002734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	615a      	str	r2, [r3, #20]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800

08002750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e042      	b.n	800280c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fd ff2e 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f91d 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b20      	cmp	r3, #32
 8002832:	d16d      	bne.n	8002910 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Transmit+0x2c>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e066      	b.n	8002912 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2221      	movs	r2, #33	; 0x21
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002852:	f7fe f80f 	bl	8000874 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286c:	d108      	bne.n	8002880 <HAL_UART_Transmit+0x6c>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e003      	b.n	8002888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002888:	e02a      	b.n	80028e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f840 	bl	800291a <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e036      	b.n	8002912 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3302      	adds	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	e007      	b.n	80028d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	3301      	adds	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1cf      	bne.n	800288a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f810 	bl	800291a <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e006      	b.n	8002912 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b090      	sub	sp, #64	; 0x40
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292a:	e050      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002932:	d04c      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <UART_WaitOnFlagUntilTimeout+0x30>
 800293a:	f7fd ff9b 	bl	8000874 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002946:	429a      	cmp	r2, r3
 8002948:	d241      	bcs.n	80029ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800296a:	637a      	str	r2, [r7, #52]	; 0x34
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e5      	bne.n	800294a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3314      	adds	r3, #20
 8002984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	613b      	str	r3, [r7, #16]
   return(result);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3314      	adds	r3, #20
 800299c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299e:	623a      	str	r2, [r7, #32]
 80029a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	69f9      	ldr	r1, [r7, #28]
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e5      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e00f      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d09f      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3740      	adds	r7, #64	; 0x40
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff fb26 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	e002      	b.n	8002a6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7ff fb0e 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	0119      	lsls	r1, r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <UART_SetConfig+0x118>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	4419      	add	r1, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	; 0x32
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	440a      	add	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	2b84      	cmp	r3, #132	; 0x84
 8002b28:	d005      	beq.n	8002b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	3303      	adds	r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b46:	f000 fe15 	bl	8003774 <vTaskStartScheduler>
  
  return osOK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <osThreadCreate+0x54>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01c      	beq.n	8002ba4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685c      	ldr	r4, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691e      	ldr	r6, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ffc9 	bl	8002b14 <makeFreeRtosPriority>
 8002b82:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8c:	9202      	str	r2, [sp, #8]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	9100      	str	r1, [sp, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4632      	mov	r2, r6
 8002b96:	4629      	mov	r1, r5
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 fc15 	bl	80033c8 <xTaskCreateStatic>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e01c      	b.n	8002bde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685c      	ldr	r4, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffab 	bl	8002b14 <makeFreeRtosPriority>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	9200      	str	r2, [sp, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f000 fc56 	bl	8003480 <xTaskCreate>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10a      	bne.n	8002c16 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f000 f935 	bl	8002e7c <xQueueGenericCreateStatic>
 8002c12:	4603      	mov	r3, r0
 8002c14:	e016      	b.n	8002c44 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e014      	b.n	8002c44 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d110      	bne.n	8002c42 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002c20:	2203      	movs	r2, #3
 8002c22:	2100      	movs	r1, #0
 8002c24:	2001      	movs	r0, #1
 8002c26:	f000 f9a0 	bl	8002f6a <xQueueGenericCreate>
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <osSemaphoreCreate+0x56>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f9f3 	bl	8003024 <xQueueGenericSend>
      return sema;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	e000      	b.n	8002c44 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002c42:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f103 0208 	add.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f103 0208 	add.w	r2, r3, #8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0208 	add.w	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfe:	d103      	bne.n	8002d08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e00c      	b.n	8002d22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e002      	b.n	8002d16 <vListInsert+0x2e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d2f6      	bcs.n	8002d10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6892      	ldr	r2, [r2, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6852      	ldr	r2, [r2, #4]
 8002d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d103      	bne.n	8002d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dd6:	f001 fae1 	bl	800439c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	3b01      	subs	r3, #1
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	22ff      	movs	r2, #255	; 0xff
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d114      	bne.n	8002e56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01a      	beq.n	8002e6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3310      	adds	r3, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fef3 	bl	8003c24 <xTaskRemoveFromEventList>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <xQueueGenericReset+0xcc>)
 8002e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	e009      	b.n	8002e6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3310      	adds	r3, #16
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fef6 	bl	8002c4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3324      	adds	r3, #36	; 0x24
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fef1 	bl	8002c4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e6a:	f001 fac7 	bl	80043fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e6e:	2301      	movs	r3, #1
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ebe:	bf00      	nop
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <xQueueGenericCreateStatic+0x52>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <xQueueGenericCreateStatic+0x56>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericCreateStatic+0x58>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	623b      	str	r3, [r7, #32]
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <xQueueGenericCreateStatic+0x7e>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <xQueueGenericCreateStatic+0x82>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericCreateStatic+0x84>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61fb      	str	r3, [r7, #28]
}
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f1a:	2348      	movs	r3, #72	; 0x48
 8002f1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b48      	cmp	r3, #72	; 0x48
 8002f22:	d00a      	beq.n	8002f3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	61bb      	str	r3, [r7, #24]
}
 8002f36:	bf00      	nop
 8002f38:	e7fe      	b.n	8002f38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f843 	bl	8002fe6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3730      	adds	r7, #48	; 0x30
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	; 0x28
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	613b      	str	r3, [r7, #16]
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e004      	b.n	8002faa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3348      	adds	r3, #72	; 0x48
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 fab6 	bl	8004520 <pvPortMalloc>
 8002fb4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00f      	beq.n	8002fdc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3348      	adds	r3, #72	; 0x48
 8002fc0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f805 	bl	8002fe6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e002      	b.n	8003008 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003014:	2101      	movs	r1, #1
 8003016:	69b8      	ldr	r0, [r7, #24]
 8003018:	f7ff fec8 	bl	8002dac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xQueueGenericSend+0x32>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <xQueueGenericSend+0x40>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <xQueueGenericSend+0x44>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <xQueueGenericSend+0x46>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <xQueueGenericSend+0x60>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d103      	bne.n	8003092 <xQueueGenericSend+0x6e>
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <xQueueGenericSend+0x72>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericSend+0x74>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	623b      	str	r3, [r7, #32]
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b2:	f000 ff7b 	bl	8003fac <xTaskGetSchedulerState>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <xQueueGenericSend+0x9e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueGenericSend+0xa2>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueGenericSend+0xa4>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61fb      	str	r3, [r7, #28]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e2:	f001 f95b 	bl	800439c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <xQueueGenericSend+0xd4>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d129      	bne.n	800314c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030fe:	f000 f88f 	bl	8003220 <prvCopyDataToQueue>
 8003102:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd87 	bl	8003c24 <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <xQueueGenericSend+0x1f8>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	e00a      	b.n	8003144 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <xQueueGenericSend+0x1f8>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003144:	f001 f95a 	bl	80043fc <vPortExitCritical>
				return pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	e063      	b.n	8003214 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003152:	f001 f953 	bl	80043fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003156:	2300      	movs	r3, #0
 8003158:	e05c      	b.n	8003214 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fdbf 	bl	8003ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316a:	2301      	movs	r3, #1
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800316e:	f001 f945 	bl	80043fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003172:	f000 fb69 	bl	8003848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003176:	f001 f911 	bl	800439c <vPortEnterCritical>
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	b25b      	sxtb	r3, r3
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003186:	d103      	bne.n	8003190 <xQueueGenericSend+0x16c>
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSend+0x182>
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a6:	f001 f929 	bl	80043fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031aa:	1d3a      	adds	r2, r7, #4
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4611      	mov	r1, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fdae 	bl	8003d14 <xTaskCheckForTimeOut>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d124      	bne.n	8003208 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c0:	f000 f8ea 	bl	8003398 <prvIsQueueFull>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d018      	beq.n	80031fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	3310      	adds	r3, #16
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fd02 	bl	8003bdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031da:	f000 f88b 	bl	80032f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031de:	f000 fb41 	bl	8003864 <xTaskResumeAll>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f af7c 	bne.w	80030e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <xQueueGenericSend+0x1f8>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	e772      	b.n	80030e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031fe:	f000 f879 	bl	80032f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003202:	f000 fb2f 	bl	8003864 <xTaskResumeAll>
 8003206:	e76c      	b.n	80030e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800320a:	f000 f873 	bl	80032f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800320e:	f000 fb29 	bl	8003864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003212:	2300      	movs	r3, #0
		}
	}
}
 8003214:	4618      	mov	r0, r3
 8003216:	3738      	adds	r7, #56	; 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d14d      	bne.n	80032e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fecc 	bl	8003fe8 <xTaskPriorityDisinherit>
 8003250:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e043      	b.n	80032e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d119      	bne.n	8003294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6898      	ldr	r0, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	f001 fbb4 	bl	80049d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d32b      	bcc.n	80032e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	e026      	b.n	80032e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68d8      	ldr	r0, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	461a      	mov	r2, r3
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	f001 fb9a 	bl	80049d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	425b      	negs	r3, r3
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	425b      	negs	r3, r3
 80032ca:	441a      	add	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d105      	bne.n	80032e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	3b01      	subs	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032ea:	697b      	ldr	r3, [r7, #20]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032fc:	f001 f84e 	bl	800439c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003306:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003308:	e011      	b.n	800332e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fc84 	bl	8003c24 <xTaskRemoveFromEventList>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003322:	f000 fd59 	bl	8003dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	3b01      	subs	r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	dce9      	bgt.n	800330a <prvUnlockQueue+0x16>
 8003336:	e000      	b.n	800333a <prvUnlockQueue+0x46>
					break;
 8003338:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003342:	f001 f85b 	bl	80043fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003346:	f001 f829 	bl	800439c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003350:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003352:	e011      	b.n	8003378 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3310      	adds	r3, #16
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fc5f 	bl	8003c24 <xTaskRemoveFromEventList>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800336c:	f000 fd34 	bl	8003dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	3b01      	subs	r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003378:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800337c:	2b00      	cmp	r3, #0
 800337e:	dce9      	bgt.n	8003354 <prvUnlockQueue+0x60>
 8003380:	e000      	b.n	8003384 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003382:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800338c:	f001 f836 	bl	80043fc <vPortExitCritical>
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a0:	f000 fffc 	bl	800439c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d102      	bne.n	80033b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e001      	b.n	80033ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ba:	f001 f81f 	bl	80043fc <vPortExitCritical>

	return xReturn;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCreateStatic+0x46>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61fb      	str	r3, [r7, #28]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800340e:	23a0      	movs	r3, #160	; 0xa0
 8003410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2ba0      	cmp	r3, #160	; 0xa0
 8003416:	d00a      	beq.n	800342e <xTaskCreateStatic+0x66>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61bb      	str	r3, [r7, #24]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01e      	beq.n	8003472 <xTaskCreateStatic+0xaa>
 8003434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01b      	beq.n	8003472 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003442:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2202      	movs	r2, #2
 8003448:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800344c:	2300      	movs	r3, #0
 800344e:	9303      	str	r3, [sp, #12]
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	9302      	str	r3, [sp, #8]
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f851 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800346a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800346c:	f000 f8e4 	bl	8003638 <prvAddNewTaskToReadyList>
 8003470:	e001      	b.n	8003476 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003476:	697b      	ldr	r3, [r7, #20]
	}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	; 0x30
 8003484:	af04      	add	r7, sp, #16
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f843 	bl	8004520 <pvPortMalloc>
 800349a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00e      	beq.n	80034c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034a2:	20a0      	movs	r0, #160	; 0xa0
 80034a4:	f001 f83c 	bl	8004520 <pvPortMalloc>
 80034a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
 80034b6:	e005      	b.n	80034c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034b8:	6978      	ldr	r0, [r7, #20]
 80034ba:	f001 f8f5 	bl	80046a8 <vPortFree>
 80034be:	e001      	b.n	80034c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	2300      	movs	r3, #0
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f80f 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ee:	69f8      	ldr	r0, [r7, #28]
 80034f0:	f000 f8a2 	bl	8003638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e002      	b.n	8003500 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003500:	69bb      	ldr	r3, [r7, #24]
	}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003524:	3b01      	subs	r3, #1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <prvInitialiseNewTask+0x48>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	617b      	str	r3, [r7, #20]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e012      	b.n	8003580 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	7819      	ldrb	r1, [r3, #0]
 8003562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	3334      	adds	r3, #52	; 0x34
 800356a:	460a      	mov	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d9e9      	bls.n	800355a <prvInitialiseNewTask+0x4e>
 8003586:	e000      	b.n	800358a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003588:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	2b06      	cmp	r3, #6
 8003596:	d901      	bls.n	800359c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003598:	2306      	movs	r3, #6
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	2200      	movs	r2, #0
 80035ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	3304      	adds	r3, #4
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fb69 	bl	8002c8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	3318      	adds	r3, #24
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fb64 	bl	8002c8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	f1c3 0207 	rsb	r2, r3, #7
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	334c      	adds	r3, #76	; 0x4c
 80035ec:	224c      	movs	r2, #76	; 0x4c
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 f96d 	bl	80048d0 <memset>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <prvInitialiseNewTask+0x120>)
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <prvInitialiseNewTask+0x124>)
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <prvInitialiseNewTask+0x128>)
 8003606:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	69b8      	ldr	r0, [r7, #24]
 800360e:	f000 fdd7 	bl	80041c0 <pxPortInitialiseStack>
 8003612:	4602      	mov	r2, r0
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003624:	bf00      	nop
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200031c0 	.word	0x200031c0
 8003630:	20003228 	.word	0x20003228
 8003634:	20003290 	.word	0x20003290

08003638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003640:	f000 feac 	bl	800439c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003644:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <prvAddNewTaskToReadyList+0xb8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <prvAddNewTaskToReadyList+0xb8>)
 800364c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <prvAddNewTaskToReadyList+0xbc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003656:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <prvAddNewTaskToReadyList+0xbc>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <prvAddNewTaskToReadyList+0xb8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d110      	bne.n	8003686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003664:	f000 fbdc 	bl	8003e20 <prvInitialiseTaskLists>
 8003668:	e00d      	b.n	8003686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <prvAddNewTaskToReadyList+0xc0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <prvAddNewTaskToReadyList+0xbc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d802      	bhi.n	8003686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <prvAddNewTaskToReadyList+0xbc>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <prvAddNewTaskToReadyList+0xc4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <prvAddNewTaskToReadyList+0xc4>)
 800368e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <prvAddNewTaskToReadyList+0xc8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <prvAddNewTaskToReadyList+0xc8>)
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <prvAddNewTaskToReadyList+0xcc>)
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7ff faf2 	bl	8002ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036be:	f000 fe9d 	bl	80043fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <prvAddNewTaskToReadyList+0xc0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00e      	beq.n	80036e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvAddNewTaskToReadyList+0xbc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <prvAddNewTaskToReadyList+0xd0>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20002574 	.word	0x20002574
 80036f4:	20002474 	.word	0x20002474
 80036f8:	20002580 	.word	0x20002580
 80036fc:	20002590 	.word	0x20002590
 8003700:	2000257c 	.word	0x2000257c
 8003704:	20002478 	.word	0x20002478
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d017      	beq.n	800374e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <vTaskDelay+0x60>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <vTaskDelay+0x30>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60bb      	str	r3, [r7, #8]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800373c:	f000 f884 	bl	8003848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003740:	2100      	movs	r1, #0
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fcd6 	bl	80040f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003748:	f000 f88c 	bl	8003864 <xTaskResumeAll>
 800374c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <vTaskDelay+0x64>)
 8003756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000259c 	.word	0x2000259c
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003782:	463a      	mov	r2, r7
 8003784:	1d39      	adds	r1, r7, #4
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	4618      	mov	r0, r3
 800378c:	f7fc fce0 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2300      	movs	r3, #0
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	460a      	mov	r2, r1
 80037a2:	4921      	ldr	r1, [pc, #132]	; (8003828 <vTaskStartScheduler+0xb4>)
 80037a4:	4821      	ldr	r0, [pc, #132]	; (800382c <vTaskStartScheduler+0xb8>)
 80037a6:	f7ff fe0f 	bl	80033c8 <xTaskCreateStatic>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <vTaskStartScheduler+0xbc>)
 80037ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <vTaskStartScheduler+0xbc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e001      	b.n	80037c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11b      	bne.n	8003800 <vTaskStartScheduler+0x8c>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	613b      	str	r3, [r7, #16]
}
 80037da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <vTaskStartScheduler+0xc0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	334c      	adds	r3, #76	; 0x4c
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <vTaskStartScheduler+0xc4>)
 80037e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <vTaskStartScheduler+0xc8>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <vTaskStartScheduler+0xcc>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <vTaskStartScheduler+0xd0>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037fa:	f000 fd5d 	bl	80042b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037fe:	e00e      	b.n	800381e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003806:	d10a      	bne.n	800381e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <vTaskStartScheduler+0xa8>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08004adc 	.word	0x08004adc
 800382c:	08003df1 	.word	0x08003df1
 8003830:	20002598 	.word	0x20002598
 8003834:	20002474 	.word	0x20002474
 8003838:	2000005c 	.word	0x2000005c
 800383c:	20002594 	.word	0x20002594
 8003840:	20002580 	.word	0x20002580
 8003844:	20002578 	.word	0x20002578

08003848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <vTaskSuspendAll+0x18>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a03      	ldr	r2, [pc, #12]	; (8003860 <vTaskSuspendAll+0x18>)
 8003854:	6013      	str	r3, [r2, #0]
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	2000259c 	.word	0x2000259c

08003864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <xTaskResumeAll+0x114>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <xTaskResumeAll+0x2c>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	603b      	str	r3, [r7, #0]
}
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003890:	f000 fd84 	bl	800439c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <xTaskResumeAll+0x114>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b01      	subs	r3, #1
 800389a:	4a37      	ldr	r2, [pc, #220]	; (8003978 <xTaskResumeAll+0x114>)
 800389c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <xTaskResumeAll+0x114>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d161      	bne.n	800396a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038a6:	4b35      	ldr	r3, [pc, #212]	; (800397c <xTaskResumeAll+0x118>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d05d      	beq.n	800396a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ae:	e02e      	b.n	800390e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038b0:	4b33      	ldr	r3, [pc, #204]	; (8003980 <xTaskResumeAll+0x11c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3318      	adds	r3, #24
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fa4b 	bl	8002d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fa46 	bl	8002d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <xTaskResumeAll+0x120>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <xTaskResumeAll+0x120>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a27      	ldr	r2, [pc, #156]	; (8003988 <xTaskResumeAll+0x124>)
 80038ec:	441a      	add	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7ff f9d4 	bl	8002ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	4b23      	ldr	r3, [pc, #140]	; (800398c <xTaskResumeAll+0x128>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <xTaskResumeAll+0x12c>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <xTaskResumeAll+0x11c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1cc      	bne.n	80038b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800391c:	f000 fb22 	bl	8003f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <xTaskResumeAll+0x130>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d010      	beq.n	800394e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800392c:	f000 f836 	bl	800399c <xTaskIncrementTick>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <xTaskResumeAll+0x12c>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f1      	bne.n	800392c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <xTaskResumeAll+0x130>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <xTaskResumeAll+0x12c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003956:	2301      	movs	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <xTaskResumeAll+0x134>)
 800395c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800396a:	f000 fd47 	bl	80043fc <vPortExitCritical>

	return xAlreadyYielded;
 800396e:	68bb      	ldr	r3, [r7, #8]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000259c 	.word	0x2000259c
 800397c:	20002574 	.word	0x20002574
 8003980:	20002534 	.word	0x20002534
 8003984:	2000257c 	.word	0x2000257c
 8003988:	20002478 	.word	0x20002478
 800398c:	20002474 	.word	0x20002474
 8003990:	20002588 	.word	0x20002588
 8003994:	20002584 	.word	0x20002584
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <xTaskIncrementTick+0x150>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 808d 	bne.w	8003aca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039b0:	4b4f      	ldr	r3, [pc, #316]	; (8003af0 <xTaskIncrementTick+0x154>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039b8:	4a4d      	ldr	r2, [pc, #308]	; (8003af0 <xTaskIncrementTick+0x154>)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d120      	bne.n	8003a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <xTaskIncrementTick+0x158>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	603b      	str	r3, [r7, #0]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xTaskIncrementTick+0x46>
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <xTaskIncrementTick+0x158>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <xTaskIncrementTick+0x15c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a41      	ldr	r2, [pc, #260]	; (8003af4 <xTaskIncrementTick+0x158>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4a41      	ldr	r2, [pc, #260]	; (8003af8 <xTaskIncrementTick+0x15c>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b40      	ldr	r3, [pc, #256]	; (8003afc <xTaskIncrementTick+0x160>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <xTaskIncrementTick+0x160>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	f000 faaf 	bl	8003f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <xTaskIncrementTick+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d34d      	bcc.n	8003aac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a10:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <xTaskIncrementTick+0x158>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xTaskIncrementTick+0x82>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xTaskIncrementTick+0x84>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <xTaskIncrementTick+0x164>)
 8003a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2a:	601a      	str	r2, [r3, #0]
					break;
 8003a2c:	e03e      	b.n	8003aac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <xTaskIncrementTick+0x158>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d203      	bcs.n	8003a4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a46:	4a2e      	ldr	r2, [pc, #184]	; (8003b00 <xTaskIncrementTick+0x164>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6013      	str	r3, [r2, #0]
						break;
 8003a4c:	e02e      	b.n	8003aac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f980 	bl	8002d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f977 	bl	8002d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <xTaskIncrementTick+0x168>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <xTaskIncrementTick+0x168>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <xTaskIncrementTick+0x16c>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7ff f905 	bl	8002ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <xTaskIncrementTick+0x170>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3b4      	bcc.n	8003a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aaa:	e7b1      	b.n	8003a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <xTaskIncrementTick+0x170>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	4915      	ldr	r1, [pc, #84]	; (8003b08 <xTaskIncrementTick+0x16c>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d907      	bls.n	8003ad4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e004      	b.n	8003ad4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <xTaskIncrementTick+0x174>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <xTaskIncrementTick+0x174>)
 8003ad2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <xTaskIncrementTick+0x178>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ae0:	697b      	ldr	r3, [r7, #20]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000259c 	.word	0x2000259c
 8003af0:	20002578 	.word	0x20002578
 8003af4:	2000252c 	.word	0x2000252c
 8003af8:	20002530 	.word	0x20002530
 8003afc:	2000258c 	.word	0x2000258c
 8003b00:	20002594 	.word	0x20002594
 8003b04:	2000257c 	.word	0x2000257c
 8003b08:	20002478 	.word	0x20002478
 8003b0c:	20002474 	.word	0x20002474
 8003b10:	20002584 	.word	0x20002584
 8003b14:	20002588 	.word	0x20002588

08003b18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b1e:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <vTaskSwitchContext+0xac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <vTaskSwitchContext+0xb0>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b2c:	e044      	b.n	8003bb8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <vTaskSwitchContext+0xb0>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <vTaskSwitchContext+0xb4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	fab3 f383 	clz	r3, r3
 8003b40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	f1c3 031f 	rsb	r3, r3, #31
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	4921      	ldr	r1, [pc, #132]	; (8003bd0 <vTaskSwitchContext+0xb8>)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	607b      	str	r3, [r7, #4]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <vTaskSwitchContext+0x5a>
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <vTaskSwitchContext+0xb8>)
 8003b80:	4413      	add	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3308      	adds	r3, #8
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d104      	bne.n	8003ba4 <vTaskSwitchContext+0x8c>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <vTaskSwitchContext+0xbc>)
 8003bac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <vTaskSwitchContext+0xbc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	334c      	adds	r3, #76	; 0x4c
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <vTaskSwitchContext+0xc0>)
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000259c 	.word	0x2000259c
 8003bc8:	20002588 	.word	0x20002588
 8003bcc:	2000257c 	.word	0x2000257c
 8003bd0:	20002478 	.word	0x20002478
 8003bd4:	20002474 	.word	0x20002474
 8003bd8:	2000005c 	.word	0x2000005c

08003bdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	60fb      	str	r3, [r7, #12]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <vTaskPlaceOnEventList+0x44>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3318      	adds	r3, #24
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff f86c 	bl	8002ce8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c10:	2101      	movs	r1, #1
 8003c12:	6838      	ldr	r0, [r7, #0]
 8003c14:	f000 fa6e 	bl	80040f4 <prvAddCurrentTaskToDelayedList>
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20002474 	.word	0x20002474

08003c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60fb      	str	r3, [r7, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3318      	adds	r3, #24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f87f 	bl	8002d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <xTaskRemoveFromEventList+0xac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11c      	bne.n	8003c9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f876 	bl	8002d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <xTaskRemoveFromEventList+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <xTaskRemoveFromEventList+0xb0>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <xTaskRemoveFromEventList+0xb4>)
 8003c8c:	441a      	add	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff f804 	bl	8002ca2 <vListInsertEnd>
 8003c9a:	e005      	b.n	8003ca8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	480e      	ldr	r0, [pc, #56]	; (8003cdc <xTaskRemoveFromEventList+0xb8>)
 8003ca4:	f7fe fffd 	bl	8002ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <xTaskRemoveFromEventList+0xbc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d905      	bls.n	8003cc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <xTaskRemoveFromEventList+0xc0>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e001      	b.n	8003cc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003cc6:	697b      	ldr	r3, [r7, #20]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000259c 	.word	0x2000259c
 8003cd4:	2000257c 	.word	0x2000257c
 8003cd8:	20002478 	.word	0x20002478
 8003cdc:	20002534 	.word	0x20002534
 8003ce0:	20002474 	.word	0x20002474
 8003ce4:	20002588 	.word	0x20002588

08003ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <vTaskInternalSetTimeOutState+0x24>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <vTaskInternalSetTimeOutState+0x28>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	2000258c 	.word	0x2000258c
 8003d10:	20002578 	.word	0x20002578

08003d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	613b      	str	r3, [r7, #16]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d56:	f000 fb21 	bl	800439c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <xTaskCheckForTimeOut+0xbc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d102      	bne.n	8003d7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e023      	b.n	8003dc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <xTaskCheckForTimeOut+0xc0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d007      	beq.n	8003d96 <xTaskCheckForTimeOut+0x82>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e015      	b.n	8003dc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d20b      	bcs.n	8003db8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff9b 	bl	8003ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e004      	b.n	8003dc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f000 fb1b 	bl	80043fc <vPortExitCritical>

	return xReturn;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20002578 	.word	0x20002578
 8003dd4:	2000258c 	.word	0x2000258c

08003dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <vTaskMissedYield+0x14>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20002588 	.word	0x20002588

08003df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003df8:	f000 f852 	bl	8003ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <prvIdleTask+0x28>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d9f9      	bls.n	8003df8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <prvIdleTask+0x2c>)
 8003e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e14:	e7f0      	b.n	8003df8 <prvIdleTask+0x8>
 8003e16:	bf00      	nop
 8003e18:	20002478 	.word	0x20002478
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	e00c      	b.n	8003e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <prvInitialiseTaskLists+0x60>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe ff06 	bl	8002c4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3301      	adds	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d9ef      	bls.n	8003e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e4c:	480d      	ldr	r0, [pc, #52]	; (8003e84 <prvInitialiseTaskLists+0x64>)
 8003e4e:	f7fe fefd 	bl	8002c4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e52:	480d      	ldr	r0, [pc, #52]	; (8003e88 <prvInitialiseTaskLists+0x68>)
 8003e54:	f7fe fefa 	bl	8002c4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e58:	480c      	ldr	r0, [pc, #48]	; (8003e8c <prvInitialiseTaskLists+0x6c>)
 8003e5a:	f7fe fef7 	bl	8002c4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e5e:	480c      	ldr	r0, [pc, #48]	; (8003e90 <prvInitialiseTaskLists+0x70>)
 8003e60:	f7fe fef4 	bl	8002c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e64:	480b      	ldr	r0, [pc, #44]	; (8003e94 <prvInitialiseTaskLists+0x74>)
 8003e66:	f7fe fef1 	bl	8002c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <prvInitialiseTaskLists+0x78>)
 8003e6c:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <prvInitialiseTaskLists+0x64>)
 8003e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvInitialiseTaskLists+0x7c>)
 8003e72:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <prvInitialiseTaskLists+0x68>)
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20002478 	.word	0x20002478
 8003e84:	20002504 	.word	0x20002504
 8003e88:	20002518 	.word	0x20002518
 8003e8c:	20002534 	.word	0x20002534
 8003e90:	20002548 	.word	0x20002548
 8003e94:	20002560 	.word	0x20002560
 8003e98:	2000252c 	.word	0x2000252c
 8003e9c:	20002530 	.word	0x20002530

08003ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea6:	e019      	b.n	8003edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ea8:	f000 fa78 	bl	800439c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <prvCheckTasksWaitingTermination+0x50>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe ff4d 	bl	8002d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <prvCheckTasksWaitingTermination+0x54>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <prvCheckTasksWaitingTermination+0x54>)
 8003ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ed2:	f000 fa93 	bl	80043fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f810 	bl	8003efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <prvCheckTasksWaitingTermination+0x58>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e1      	bne.n	8003ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20002548 	.word	0x20002548
 8003ef4:	20002574 	.word	0x20002574
 8003ef8:	2000255c 	.word	0x2000255c

08003efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	334c      	adds	r3, #76	; 0x4c
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fce9 	bl	80048e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d108      	bne.n	8003f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fbc3 	bl	80046a8 <vPortFree>
				vPortFree( pxTCB );
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fbc0 	bl	80046a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f28:	e018      	b.n	8003f5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d103      	bne.n	8003f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fbb7 	bl	80046a8 <vPortFree>
	}
 8003f3a:	e00f      	b.n	8003f5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d00a      	beq.n	8003f5c <prvDeleteTCB+0x60>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	60fb      	str	r3, [r7, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <prvDeleteTCB+0x5e>
	}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <prvResetNextTaskUnblockTime+0x40>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <prvResetNextTaskUnblockTime+0x14>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <prvResetNextTaskUnblockTime+0x16>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <prvResetNextTaskUnblockTime+0x44>)
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f86:	e008      	b.n	8003f9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <prvResetNextTaskUnblockTime+0x40>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <prvResetNextTaskUnblockTime+0x44>)
 8003f98:	6013      	str	r3, [r2, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	2000252c 	.word	0x2000252c
 8003fa8:	20002594 	.word	0x20002594

08003fac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <xTaskGetSchedulerState+0x34>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e008      	b.n	8003fd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <xTaskGetSchedulerState+0x38>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e001      	b.n	8003fd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fd2:	687b      	ldr	r3, [r7, #4]
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20002580 	.word	0x20002580
 8003fe4:	2000259c 	.word	0x2000259c

08003fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d06e      	beq.n	80040dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <xTaskPriorityDisinherit+0x100>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d00a      	beq.n	800401e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	60bb      	str	r3, [r7, #8]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	429a      	cmp	r2, r3
 8004050:	d044      	beq.n	80040dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b00      	cmp	r3, #0
 8004058:	d140      	bne.n	80040dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fe7a 	bl	8002d58 <uxListRemove>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d115      	bne.n	8004096 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	491f      	ldr	r1, [pc, #124]	; (80040ec <xTaskPriorityDisinherit+0x104>)
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xTaskPriorityDisinherit+0xae>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <xTaskPriorityDisinherit+0x108>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4013      	ands	r3, r2
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <xTaskPriorityDisinherit+0x108>)
 8004094:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f1c3 0207 	rsb	r2, r3, #7
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	2201      	movs	r2, #1
 80040b0:	409a      	lsls	r2, r3
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <xTaskPriorityDisinherit+0x108>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <xTaskPriorityDisinherit+0x108>)
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <xTaskPriorityDisinherit+0x104>)
 80040ca:	441a      	add	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f7fe fde5 	bl	8002ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040dc:	697b      	ldr	r3, [r7, #20]
	}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20002474 	.word	0x20002474
 80040ec:	20002478 	.word	0x20002478
 80040f0:	2000257c 	.word	0x2000257c

080040f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fe24 	bl	8002d58 <uxListRemove>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	2201      	movs	r2, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4013      	ands	r3, r2
 800412a:	4a20      	ldr	r2, [pc, #128]	; (80041ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800412c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004134:	d10a      	bne.n	800414c <prvAddCurrentTaskToDelayedList+0x58>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	481a      	ldr	r0, [pc, #104]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004146:	f7fe fdac 	bl	8002ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800414a:	e026      	b.n	800419a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d209      	bcs.n	8004178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3304      	adds	r3, #4
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f7fe fdb9 	bl	8002ce8 <vListInsert>
}
 8004176:	e010      	b.n	800419a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe fdaf 	bl	8002ce8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d202      	bcs.n	800419a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004194:	4a09      	ldr	r2, [pc, #36]	; (80041bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6013      	str	r3, [r2, #0]
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20002578 	.word	0x20002578
 80041a8:	20002474 	.word	0x20002474
 80041ac:	2000257c 	.word	0x2000257c
 80041b0:	20002560 	.word	0x20002560
 80041b4:	20002530 	.word	0x20002530
 80041b8:	2000252c 	.word	0x2000252c
 80041bc:	20002594 	.word	0x20002594

080041c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b04      	subs	r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b04      	subs	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b04      	subs	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <pxPortInitialiseStack+0x54>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b14      	subs	r3, #20
 80041fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b20      	subs	r3, #32
 8004206:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	08004219 	.word	0x08004219

08004218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <prvTaskExitError+0x54>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422a:	d00a      	beq.n	8004242 <prvTaskExitError+0x2a>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60fb      	str	r3, [r7, #12]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <prvTaskExitError+0x28>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60bb      	str	r3, [r7, #8]
}
 8004254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004256:	bf00      	nop
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0fc      	beq.n	8004258 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000000c 	.word	0x2000000c

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	f04e 0e0d 	orr.w	lr, lr, #13
 800428e:	4770      	bx	lr

08004290 <pxCurrentTCBConst2>:
 8004290:	20002474 	.word	0x20002474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004298:	4806      	ldr	r0, [pc, #24]	; (80042b4 <prvPortStartFirstTask+0x1c>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	b662      	cpsie	i
 80042a4:	b661      	cpsie	f
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	df00      	svc	0
 80042b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042b2:	bf00      	nop
 80042b4:	e000ed08 	.word	0xe000ed08

080042b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <xPortStartScheduler+0xd0>)
 80042c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b2a      	ldr	r3, [pc, #168]	; (800438c <xPortStartScheduler+0xd4>)
 80042e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e6:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <xPortStartScheduler+0xd8>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ec:	e009      	b.n	8004302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <xPortStartScheduler+0xd8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	4a26      	ldr	r2, [pc, #152]	; (8004390 <xPortStartScheduler+0xd8>)
 80042f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d0ef      	beq.n	80042ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430e:	4b20      	ldr	r3, [pc, #128]	; (8004390 <xPortStartScheduler+0xd8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	d00a      	beq.n	8004330 <xPortStartScheduler+0x78>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60bb      	str	r3, [r7, #8]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <xPortStartScheduler+0xd8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	4a16      	ldr	r2, [pc, #88]	; (8004390 <xPortStartScheduler+0xd8>)
 8004338:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <xPortStartScheduler+0xd8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004342:	4a13      	ldr	r2, [pc, #76]	; (8004390 <xPortStartScheduler+0xd8>)
 8004344:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <xPortStartScheduler+0xdc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <xPortStartScheduler+0xdc>)
 8004354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <xPortStartScheduler+0xdc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a0d      	ldr	r2, [pc, #52]	; (8004394 <xPortStartScheduler+0xdc>)
 8004360:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004364:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004366:	f000 f8b9 	bl	80044dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <xPortStartScheduler+0xe0>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004370:	f7ff ff92 	bl	8004298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004374:	f7ff fbd0 	bl	8003b18 <vTaskSwitchContext>
	prvTaskExitError();
 8004378:	f7ff ff4e 	bl	8004218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e400 	.word	0xe000e400
 800438c:	200025a0 	.word	0x200025a0
 8004390:	200025a4 	.word	0x200025a4
 8004394:	e000ed20 	.word	0xe000ed20
 8004398:	2000000c 	.word	0x2000000c

0800439c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
}
 80043b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <vPortEnterCritical+0x58>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <vPortEnterCritical+0x58>)
 80043be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <vPortEnterCritical+0x58>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10f      	bne.n	80043e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <vPortEnterCritical+0x5c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	603b      	str	r3, [r7, #0]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <vPortEnterCritical+0x4a>
	}
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <vPortExitCritical+0x4c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <vPortExitCritical+0x24>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	607b      	str	r3, [r7, #4]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <vPortExitCritical+0x4c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3b01      	subs	r3, #1
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <vPortExitCritical+0x4c>)
 8004428:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <vPortExitCritical+0x4c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <vPortExitCritical+0x42>
 8004432:	2300      	movs	r3, #0
 8004434:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800443c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	2000000c 	.word	0x2000000c
 800444c:	00000000 	.word	0x00000000

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004460:	6010      	str	r0, [r2, #0]
 8004462:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004466:	f04f 0050 	mov.w	r0, #80	; 0x50
 800446a:	f380 8811 	msr	BASEPRI, r0
 800446e:	f7ff fb53 	bl	8003b18 <vTaskSwitchContext>
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004486:	f380 8809 	msr	PSP, r0
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	4770      	bx	lr

08004490 <pxCurrentTCBConst>:
 8004490:	20002474 	.word	0x20002474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044b2:	f7ff fa73 	bl	800399c <xTaskIncrementTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <SysTick_Handler+0x40>)
 80044be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f383 8811 	msr	BASEPRI, r3
}
 80044ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <vPortSetupTimerInterrupt+0x30>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <vPortSetupTimerInterrupt+0x34>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <vPortSetupTimerInterrupt+0x38>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <vPortSetupTimerInterrupt+0x3c>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <vPortSetupTimerInterrupt+0x40>)
 80044fa:	3b01      	subs	r3, #1
 80044fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044fe:	4b03      	ldr	r3, [pc, #12]	; (800450c <vPortSetupTimerInterrupt+0x30>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	e000e010 	.word	0xe000e010
 8004510:	e000e018 	.word	0xe000e018
 8004514:	20000000 	.word	0x20000000
 8004518:	10624dd3 	.word	0x10624dd3
 800451c:	e000e014 	.word	0xe000e014

08004520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800452c:	f7ff f98c 	bl	8003848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004530:	4b58      	ldr	r3, [pc, #352]	; (8004694 <pvPortMalloc+0x174>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004538:	f000 f910 	bl	800475c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800453c:	4b56      	ldr	r3, [pc, #344]	; (8004698 <pvPortMalloc+0x178>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 808e 	bne.w	8004666 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01d      	beq.n	800458c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004550:	2208      	movs	r2, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	3308      	adds	r3, #8
 800456a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <pvPortMalloc+0x6c>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	617b      	str	r3, [r7, #20]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d069      	beq.n	8004666 <pvPortMalloc+0x146>
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <pvPortMalloc+0x17c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d864      	bhi.n	8004666 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800459c:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <pvPortMalloc+0x180>)
 800459e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045a0:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <pvPortMalloc+0x180>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045a6:	e004      	b.n	80045b2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <pvPortMalloc+0xa4>
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f1      	bne.n	80045a8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045c4:	4b33      	ldr	r3, [pc, #204]	; (8004694 <pvPortMalloc+0x174>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d04b      	beq.n	8004666 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2208      	movs	r2, #8
 80045d4:	4413      	add	r3, r2
 80045d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	2308      	movs	r3, #8
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d91f      	bls.n	8004630 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <pvPortMalloc+0xf8>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	613b      	str	r3, [r7, #16]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800462a:	69b8      	ldr	r0, [r7, #24]
 800462c:	f000 f8f8 	bl	8004820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <pvPortMalloc+0x17c>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <pvPortMalloc+0x17c>)
 800463c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <pvPortMalloc+0x17c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <pvPortMalloc+0x184>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d203      	bcs.n	8004652 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <pvPortMalloc+0x17c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <pvPortMalloc+0x184>)
 8004650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <pvPortMalloc+0x178>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	431a      	orrs	r2, r3
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004666:	f7ff f8fd 	bl	8003864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <pvPortMalloc+0x16a>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <pvPortMalloc+0x168>
	return pvReturn;
 800468a:	69fb      	ldr	r3, [r7, #28]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	200031b0 	.word	0x200031b0
 8004698:	200031bc 	.word	0x200031bc
 800469c:	200031b4 	.word	0x200031b4
 80046a0:	200031a8 	.word	0x200031a8
 80046a4:	200031b8 	.word	0x200031b8

080046a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d048      	beq.n	800474c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046ba:	2308      	movs	r3, #8
 80046bc:	425b      	negs	r3, r3
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4413      	add	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b21      	ldr	r3, [pc, #132]	; (8004754 <vPortFree+0xac>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <vPortFree+0x44>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60fb      	str	r3, [r7, #12]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <vPortFree+0x62>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60bb      	str	r3, [r7, #8]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <vPortFree+0xac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d019      	beq.n	800474c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d115      	bne.n	800474c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <vPortFree+0xac>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	43db      	mvns	r3, r3
 800472a:	401a      	ands	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004730:	f7ff f88a 	bl	8003848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <vPortFree+0xb0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4413      	add	r3, r2
 800473e:	4a06      	ldr	r2, [pc, #24]	; (8004758 <vPortFree+0xb0>)
 8004740:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004742:	6938      	ldr	r0, [r7, #16]
 8004744:	f000 f86c 	bl	8004820 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004748:	f7ff f88c 	bl	8003864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	200031bc 	.word	0x200031bc
 8004758:	200031b4 	.word	0x200031b4

0800475c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004762:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004766:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <prvHeapInit+0xac>)
 800476a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3307      	adds	r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0307 	bic.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <prvHeapInit+0xac>)
 800478c:	4413      	add	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <prvHeapInit+0xb0>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <prvHeapInit+0xb0>)
 800479c:	2200      	movs	r2, #0
 800479e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4413      	add	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047a8:	2208      	movs	r2, #8
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <prvHeapInit+0xb4>)
 80047bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <prvHeapInit+0xb4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <prvHeapInit+0xb4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <prvHeapInit+0xb4>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <prvHeapInit+0xb8>)
 80047ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a09      	ldr	r2, [pc, #36]	; (8004818 <prvHeapInit+0xbc>)
 80047f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <prvHeapInit+0xc0>)
 80047f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	200025a8 	.word	0x200025a8
 800480c:	200031a8 	.word	0x200031a8
 8004810:	200031b0 	.word	0x200031b0
 8004814:	200031b8 	.word	0x200031b8
 8004818:	200031b4 	.word	0x200031b4
 800481c:	200031bc 	.word	0x200031bc

08004820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <prvInsertBlockIntoFreeList+0xa8>)
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e002      	b.n	8004834 <prvInsertBlockIntoFreeList+0x14>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d8f7      	bhi.n	800482e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d108      	bne.n	8004862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d118      	bne.n	80048a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <prvInsertBlockIntoFreeList+0xac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d00d      	beq.n	800489e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e008      	b.n	80048b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <prvInsertBlockIntoFreeList+0xac>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e003      	b.n	80048b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d002      	beq.n	80048be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	200031a8 	.word	0x200031a8
 80048cc:	200031b0 	.word	0x200031b0

080048d0 <memset>:
 80048d0:	4603      	mov	r3, r0
 80048d2:	4402      	add	r2, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <_reclaim_reent>:
 80048e0:	4b29      	ldr	r3, [pc, #164]	; (8004988 <_reclaim_reent+0xa8>)
 80048e2:	b570      	push	{r4, r5, r6, lr}
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4604      	mov	r4, r0
 80048e8:	4283      	cmp	r3, r0
 80048ea:	d04b      	beq.n	8004984 <_reclaim_reent+0xa4>
 80048ec:	69c3      	ldr	r3, [r0, #28]
 80048ee:	b143      	cbz	r3, 8004902 <_reclaim_reent+0x22>
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d144      	bne.n	8004980 <_reclaim_reent+0xa0>
 80048f6:	69e3      	ldr	r3, [r4, #28]
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	b111      	cbz	r1, 8004902 <_reclaim_reent+0x22>
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 f879 	bl	80049f4 <_free_r>
 8004902:	6961      	ldr	r1, [r4, #20]
 8004904:	b111      	cbz	r1, 800490c <_reclaim_reent+0x2c>
 8004906:	4620      	mov	r0, r4
 8004908:	f000 f874 	bl	80049f4 <_free_r>
 800490c:	69e1      	ldr	r1, [r4, #28]
 800490e:	b111      	cbz	r1, 8004916 <_reclaim_reent+0x36>
 8004910:	4620      	mov	r0, r4
 8004912:	f000 f86f 	bl	80049f4 <_free_r>
 8004916:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004918:	b111      	cbz	r1, 8004920 <_reclaim_reent+0x40>
 800491a:	4620      	mov	r0, r4
 800491c:	f000 f86a 	bl	80049f4 <_free_r>
 8004920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004922:	b111      	cbz	r1, 800492a <_reclaim_reent+0x4a>
 8004924:	4620      	mov	r0, r4
 8004926:	f000 f865 	bl	80049f4 <_free_r>
 800492a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800492c:	b111      	cbz	r1, 8004934 <_reclaim_reent+0x54>
 800492e:	4620      	mov	r0, r4
 8004930:	f000 f860 	bl	80049f4 <_free_r>
 8004934:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004936:	b111      	cbz	r1, 800493e <_reclaim_reent+0x5e>
 8004938:	4620      	mov	r0, r4
 800493a:	f000 f85b 	bl	80049f4 <_free_r>
 800493e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004940:	b111      	cbz	r1, 8004948 <_reclaim_reent+0x68>
 8004942:	4620      	mov	r0, r4
 8004944:	f000 f856 	bl	80049f4 <_free_r>
 8004948:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800494a:	b111      	cbz	r1, 8004952 <_reclaim_reent+0x72>
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f851 	bl	80049f4 <_free_r>
 8004952:	6a23      	ldr	r3, [r4, #32]
 8004954:	b1b3      	cbz	r3, 8004984 <_reclaim_reent+0xa4>
 8004956:	4620      	mov	r0, r4
 8004958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800495c:	4718      	bx	r3
 800495e:	5949      	ldr	r1, [r1, r5]
 8004960:	b941      	cbnz	r1, 8004974 <_reclaim_reent+0x94>
 8004962:	3504      	adds	r5, #4
 8004964:	69e3      	ldr	r3, [r4, #28]
 8004966:	2d80      	cmp	r5, #128	; 0x80
 8004968:	68d9      	ldr	r1, [r3, #12]
 800496a:	d1f8      	bne.n	800495e <_reclaim_reent+0x7e>
 800496c:	4620      	mov	r0, r4
 800496e:	f000 f841 	bl	80049f4 <_free_r>
 8004972:	e7c0      	b.n	80048f6 <_reclaim_reent+0x16>
 8004974:	680e      	ldr	r6, [r1, #0]
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f83c 	bl	80049f4 <_free_r>
 800497c:	4631      	mov	r1, r6
 800497e:	e7ef      	b.n	8004960 <_reclaim_reent+0x80>
 8004980:	2500      	movs	r5, #0
 8004982:	e7ef      	b.n	8004964 <_reclaim_reent+0x84>
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	bf00      	nop
 8004988:	2000005c 	.word	0x2000005c

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	2600      	movs	r6, #0
 8004990:	4d0c      	ldr	r5, [pc, #48]	; (80049c4 <__libc_init_array+0x38>)
 8004992:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	f000 f87e 	bl	8004a9c <_init>
 80049a0:	2600      	movs	r6, #0
 80049a2:	4d0a      	ldr	r5, [pc, #40]	; (80049cc <__libc_init_array+0x40>)
 80049a4:	4c0a      	ldr	r4, [pc, #40]	; (80049d0 <__libc_init_array+0x44>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004b10 	.word	0x08004b10
 80049c8:	08004b10 	.word	0x08004b10
 80049cc:	08004b10 	.word	0x08004b10
 80049d0:	08004b14 	.word	0x08004b14

080049d4 <__retarget_lock_acquire_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <__retarget_lock_release_recursive>:
 80049d6:	4770      	bx	lr

080049d8 <memcpy>:
 80049d8:	440a      	add	r2, r1
 80049da:	4291      	cmp	r1, r2
 80049dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049e0:	d100      	bne.n	80049e4 <memcpy+0xc>
 80049e2:	4770      	bx	lr
 80049e4:	b510      	push	{r4, lr}
 80049e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049f0:	d1f9      	bne.n	80049e6 <memcpy+0xe>
 80049f2:	bd10      	pop	{r4, pc}

080049f4 <_free_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4605      	mov	r5, r0
 80049f8:	2900      	cmp	r1, #0
 80049fa:	d040      	beq.n	8004a7e <_free_r+0x8a>
 80049fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a00:	1f0c      	subs	r4, r1, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfb8      	it	lt
 8004a06:	18e4      	addlt	r4, r4, r3
 8004a08:	f000 f83c 	bl	8004a84 <__malloc_lock>
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <_free_r+0x8c>)
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	b933      	cbnz	r3, 8004a20 <_free_r+0x2c>
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	6014      	str	r4, [r2, #0]
 8004a16:	4628      	mov	r0, r5
 8004a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1c:	f000 b838 	b.w	8004a90 <__malloc_unlock>
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d908      	bls.n	8004a36 <_free_r+0x42>
 8004a24:	6820      	ldr	r0, [r4, #0]
 8004a26:	1821      	adds	r1, r4, r0
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf01      	itttt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	1809      	addeq	r1, r1, r0
 8004a32:	6021      	streq	r1, [r4, #0]
 8004a34:	e7ed      	b.n	8004a12 <_free_r+0x1e>
 8004a36:	461a      	mov	r2, r3
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	b10b      	cbz	r3, 8004a40 <_free_r+0x4c>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d9fa      	bls.n	8004a36 <_free_r+0x42>
 8004a40:	6811      	ldr	r1, [r2, #0]
 8004a42:	1850      	adds	r0, r2, r1
 8004a44:	42a0      	cmp	r0, r4
 8004a46:	d10b      	bne.n	8004a60 <_free_r+0x6c>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	1850      	adds	r0, r2, r1
 8004a4e:	4283      	cmp	r3, r0
 8004a50:	6011      	str	r1, [r2, #0]
 8004a52:	d1e0      	bne.n	8004a16 <_free_r+0x22>
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4408      	add	r0, r1
 8004a5a:	6010      	str	r0, [r2, #0]
 8004a5c:	6053      	str	r3, [r2, #4]
 8004a5e:	e7da      	b.n	8004a16 <_free_r+0x22>
 8004a60:	d902      	bls.n	8004a68 <_free_r+0x74>
 8004a62:	230c      	movs	r3, #12
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	e7d6      	b.n	8004a16 <_free_r+0x22>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	1821      	adds	r1, r4, r0
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	6054      	str	r4, [r2, #4]
 8004a7c:	e7cb      	b.n	8004a16 <_free_r+0x22>
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	200032fc 	.word	0x200032fc

08004a84 <__malloc_lock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_lock+0x8>)
 8004a86:	f7ff bfa5 	b.w	80049d4 <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	200032f8 	.word	0x200032f8

08004a90 <__malloc_unlock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__malloc_unlock+0x8>)
 8004a92:	f7ff bfa0 	b.w	80049d6 <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	200032f8 	.word	0x200032f8

08004a9c <_init>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_fini>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr
